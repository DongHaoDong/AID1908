面向对象	Object Oriented 
概述
	面向过程
		1.分析出解决问题的步骤，然后逐步实现
		例如：婚礼筹办
		-- 发请柬 （选照片、措辞、制作）
		-- 宴席 （场地、找厨师、准备桌椅餐具、计划菜品、购买食材）
		-- 婚礼仪式（订婚礼仪式、请主持人）
		2.公式：程序 = 算法 + 数据结构
		3.优点：所有环节、细节自己掌控
		4.缺点：考虑所有细节，工作量大
	面向对象
		1.找出解决问题的人，然后分配职责。
		例如：婚礼筹办
		-- 发请柬：找摄影公司（拍照片、制作请柬）
		-- 宴席：找酒店（告诉对方标准、数量、挑选菜品）
		-- 婚礼仪式：找婚庆公司（对方提供司仪、制定流程、提供设备、帮助执行）
		2.公式：程序 = 对象 + 交互
		3.优点
		(1)思想层面
			--可模拟显示情景，更接近于人的思维
			--有利于梳理归纳、分析解决问题
		(2)技术层面
			--高复用：对重复代码进行封装，提高开发效率
			--高扩展：增加新功能，不修改以前的代码
			--高维护：代码可读性好，逻辑清晰，结构规整
类和对象
	1.类：一个抽象的概念，即生活中的"类别"
	2.对象：类的具体实例，即归属于某个类别的"个体"
	3.类是创建对象的"模板"
	  --数据成员：名词类型的状态
	  --方法成员：动词类型的行为
	4.类与类行为不同，对象与对象数据不同
	语法
		定义类
			1代码
				class 类名:
					"""文档说明"""
					def __init__(self,参数列表):
						self.实例变量 = 参数列表
					方法成员
			2说明
				--类名所有单词首字母大写
				--__init__也叫构造函数，创建对象是被调用，也可以省略
				--self变量绑定的是被创建的对象，名称可以随意命名
		创建对象(实例化)
			变量 = 构造函数(参数列表)
		实例成员
		实例变量	
			1.语法:
				(1)定义：对象.变量名
				(2)调用：对象.变量名		
			2.说明
				(1)首次通过对象赋值为创建，再次赋值为修改
					w01 = Wife()
					w01.name="丽丽"
					w01.name="莉莉"
				(2)通常在构造函数(__init__)中创建
					w01 = Wife("莉莉",24)
					print(w01.name)
				(3)每个对象存储一份，通过对象地址访问
			3.作用:描述所有对象的共同数据
			4.__dict__:对象的属性，用于存储自身实例变量的的字典
		实例方法
			1.语法	
				(1)定义：
					def 方法名称(self,参数列表):
						方法体
				(2)调用:
						对象地址.实例方法名(参数列表)
						不建议通过类名访问实例方法
			2.说明
				(1)至少有一个形参,第一个参数绑定调用这个方法的对象，一般命名为self
				(2)无论创建多少对象，方法只有一份，并且被所有对象共享
			3.作用：表示对象的行为
		
		类变量
			1.语法	
				(1)定义:在类中，方法外定义变量
					class 类名:
						变量名 = 表达式
				(2)调用:类名.方法名
			2.说明	
				---存储在类中
				---只有一份，被所有对象共享
			3.作用:描述所有对象的共同数据
		类方法
			1.语法	
				(1)定义:
					@classmethod
					def 方法名称(cls,参数列表):
						方法体
				(2)调用	
					类名.方法名(参数列表)
					不建议通过类名访问类方法
			2.说明	
				--至少有一个形参，第一个参数绑定类，一般命名为cls
				--使用@classmethod修饰的 目的是调用类方法时可以隐式传递类
				--类方法中不能访问实例成员，实例方法中可以访问类成员
			3.作用：操作类变量
		静态方法
			1.语法	
				(1)定义：
					@staticmethod
					def 方法名称(参数列表):
						方法体
				(2)调用:
					类名.方法名(参数列表)
					不建议通过类名访问静态方法
			2.说明
				--使用@staticmethod修饰的目的是该方法不需要通过对象地址调用
				--静态方法不能访问实例成员和类成员
			3.作用:定义常用的工具函数
封装
	定义
		1、数据角度讲，将一些基本数据类型复合成一个自定义类型
		2、行为角度讲，向类外提供必要的功能，隐藏实现的细节
		3、设计角度
			(1)分而治之
				--将一个大的需求分解为许多类，每个类处理一个独立的功能
				--拆分好处：便于分工，便于复用，可扩展性强
			(2)变则疏之
				--辩护的地方独立封装，避免影响其他类
			(3)高内聚
				--类中各个方法都在完成一项任务(单一职责的类)
			(4)低耦合
				--类与类的关联性与依赖度要低(每个类独立),让一个类的改变，
			[硬件高度集中，又要可插拔]
			最高的内聚莫过于类中仅包含一个方法，将会导致高内聚高耦合
			最低的耦合莫过于类中包含所有方法，将会导致低耦合低内聚
	作用
		私有成员
			1、作用：无需向类外提供的成员，可以通过私有化进行屏蔽
			2、做法：命名使用双下划线开头
			3、本质：障眼法，实际也可以访问
					 私有成员的名称被修改为:__类名__成员名,可以通过
					 
		__slots__
			1.作用：限定一个类创建的实例只能有固定的实例变量，
			2.语法：
					在类中定义
					__slots__ = ("变量名","变量名2",...)
			3.说明：含有__slots__属性的类所创建的对象没有__dict__属性，即此时离对象用来存储对象的实例属性

			4.优点：放置用户因写错属性的名称而发生程序错误
			5.缺点：丧失了动态语言可以在运行时为队形添加便令的灵活性	
		属性@property
			公开的实例变量，缺少逻辑验证，私有的实例变量与两个公开的方法相结合，又显得调用略显复杂，二属性可以将两个方法的使用方式像操作变量一样方便
						1、定义
								@property
								def name(self):
									return self.__name
								@name.setter
								def name(self,name):
									self.__name = name
						2、调用：
								对象.属性名 = 数据
								变量 = 对象.属性名		
						3、说明：
								--通常两个公开的属性保护一个私有的变量
								--@property负责读取，@属性名.setter负责写入
								--只写：属性名=property(None,写入方法名)						
								--只读：属性名=property(读入方法名,None)	
继承
	定义：	
		1.重用现有类的功能与概念，并在此基础上进行扩展
		2.说明
			--子类直接具有父类成员(共性)，还可以扩展新功能
			--事务具有一定的层次、渊源，集成可以统一概念
	优点：
		1.一种代码复用的方式
		2.以层次化的方式管理类
	缺点：
		耦合度高
	作用：
		隔离客户端代码与功能的实现方式
	实用性
		多个类在概念上是一致的，且需要进行统一的处理
	相关概念
		父类(基类、超类)	子类(派生类)
		父类相对于子类更抽象，范围更宽泛；子类相对于父类更具体，范围更狭小
		单继承：父类只有一个(例如Java,C#)
		多继承：父类可以有多个(例如c++,python)
		Object类：任何类都直接或间接继承自object类
	内置函数
		isinstance(obj,class_or_tuple)
		返回这个对象obj,是否是某个对象，或者某些类中的
多继承
	一个类继承两个或两个以上的基类，父类中的属性和方法同时
			
	语法
		1.代码
			class 子类(父类):
				def __init__(self,参数列表):
					super().__init__(参数列表)
					self.自身实例变量 = 参数
		2.说明
			--子类拥有父类的所有成员
			--子类如果没有构造函数，将自动执行父类的构造函数，但如果有构造方法，此时必须通过super()函数调用父类的构造函数，以确保父类
多态
	定义	
		父类的同一种动作或者行为在不同的子类上有不同的实现
	作用	
		1.继承将相关概念的共性进行抽象，多态在共性的基础上，体现类型的个性化(一个行为有不同的实现)
		2.增加成扩展性，体现开闭原则
	重写
		子类实现了父类中相同的方法(方法名、参数)，在调用该方法
		内置可重写函数
			python中，以双下划线开头、双下划线结尾的是系统定义的成员，我们要在自定义中进行重写，从而改变其行为
				__str__函数：将对象转换为字符串(对人友好)
				__repr__函数：将对象 转换为字符串(解释器可识别的)
		运算符重载
			定义：让自定义类生成的对象(实例)能够使用运算符进行操作		
		算数运算符
			
		

设计原则
	开-闭原则(目标，总的指导思想)
		Open Closed Principle
			对扩展开放	对修改关闭
			增加新功能，不改变原有代码
	类的单一职责(一个类的定义)
		Single Responsibility Principle
			一个类有且仅有一个改变它的原因
	依赖倒置(依赖抽象)
		Dependency Inversion Principle
			客户端代码(调用类)尽量依赖(使用)抽象的组件
			抽象的是稳定的实现是多变的
	组合复用原则(复用的最佳实践)
		Composite Reuse Principle
			如果仅仅为了代码复用优先选择组合复用，而非集成复用
			组合的耦合性相对继承低
	里氏替换(集成后的重写，指导继承的设计)
		Liskov Substitution Principle
		父类出现的地方可以被子类替换，在替换后依然保持原功能
		子类拥有父类的所有功能
		子类在重写父类方法时，尽量选择扩展重写，防止改变了功能
	迪米特法则(类与类交互的原则)
		Law of Demeter
		不要合陌生人说话
		类与类交互时，在满足功能要求的基础上，传递的数据量越少越好，因为这样可以降低耦合度
类与类的关系
	泛化：子类与父类的关系，概念复用，耦合度最高
		B类泛化A类，意味着B类是A类的一种
		做法：B类继承A类
	关联(聚合/组合):部分与整体的关系,功能的复用，变化影响一个
		A与B关联，意味着B是A的一部分
		做法：在A类中包含B类型成员
	依赖：合作关系，一种相对松散的协作，变化影响一个方法
		A依赖B类，意味着A类的某些功能依靠B类实现
		做法：B类型作为A类中方法的参数，并不是A的成员		
	
					
		
					
				