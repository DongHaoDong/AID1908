# Day15笔记
## 使用命令必须养成的习惯
```
1. tab键自动补全
2. ctrl + l:清理屏幕
3. ctrl + c:终止当前命令的执行
```
## 常用远程连接软件
```
# 终端仿真程序,其实就是windows下登录UNIX或Linux服务主机的软件,支持ssh,telnet
1. Xshell
2. Secure CRT
# Xshell实现文件互传
1. xshell图形界面:新建文件传输
2. 安装:lrzsz,是一款可在linux里可代替ftp上传和下载的程序
```
## 常见服务的端口号
```
MySQL - 3306
MongoDB - 27017
Redis - 6379
redis-sentinel - 26379
SSH - 22
HTTP - 80
NGINX - 80
HTTPS - 443
TELNET - 23
FTP - 21
```
## 文本处理工具 - awk
### 语法格式
```
awk 选项 '动作' 文件列表
```
### 常用方式
```
Linux命令 | awk 选项 '动作'
```
## 作业
```
# nginx的访问日志目录
/var/log/nginx/access.log
问题1:把访问过自己的IP地址输出
    # awk '{print $1}' access.log
问题2:统计有多少个IP访问过我
    # awk '{print $1}' access.log | sort | uniq | wc -l
问题3:统计每个IP地址的访问次数,输出前10个访问量最大的用户IP
    # awk '{print $1}' access.log | sort | sort -rn -k 1 | head -10
```
## grep命令之正则表达式
```
# 正则表达式元字符集 - 使用grep命令
. : 任意一个字符
* : 0次或多次
# 正则表达式扩展字符集 - 使用 egrep命令
+        : 1次或多次
{n}      : 出现n次
()       : 分组
[a-z]    : 所有小写字母
[A-Z]    : 所有大写字母
[a-Z]    : 所有字母
[0-9]    : 所有数字
[a-z0-9] : 所有的字母和数字
```
### 应用场景
```
# Mac地址正则匹配
# 00:0c:29:c6:36:2d
([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}
egrep "" 文件名
ifconfig | egrep "([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}" | awk '{print $2}'
```
## shell编程
### Shell格式
```
1. 扩展名: xxx.sh
2. 正文第一行必须指定解释器: #!/bin/bash
```
### shell执行方式
```
# 方式一:加权限, ./xxx.sh执行
1. chmod +x xxx.sh
2. ./xxx.sh
# 方式二:手动指定解释器
bash xxx.sh
```
### 变量
* 自定义变量
```
# 1. 自定义变量
变量名=值       ---> 注意: =两侧绝对不能有空格
eg1: name="take me to your heart"
# 2. 调用变量的格式
echo $变量名
# 3. 小细节:单引号和双引号的区别
单引号:无法获取变量的值
双引号:可以获取变量的值
```
* 环境变量+位置变量+预设变量
```
# 环境变量
echo $USER -- 当前用户
echo $UID  -- 当前用户的UID号
echo $PWD  -- 当前路径
echo $PATH -- 命令搜索路径
# 位置变量
$1 $2 $3 ... ... shell的位置变量
# 预定义变量
$# $* $?
# $? : 返回上一条命令的执行状态(0代表正确,非0代表失败)
```
**示例**
```
输出$1+$2,例如输出结果:3+5
#!/bin/bash
echo $1 + $2
```
* 变量赋值-接收用户从终端输入的值
```
# 语法格式
read -p 提示信息 变量名
# 示例
#!/bin/bash
echo $1 + $2 = `expr $1 + $2` 
```
* 变量赋值-接收用户从终端输入的值
```
# 语法格式
read -p 提示信息 变量名
# 示例
#!/bin/bash
read -p 请输入姓名:name
echo "您的姓名是:$name"
# 指定超时时间
read -p 提示信息 变量名
read -t -p 提示信息 变量名
# 示例
#!/bin/bash
read -t 3 -p 请输入用户名:username
```
**练习**
```
1. 输入学生姓名:赵敏
2. 输入学生成绩:88
3. 输出赵敏的成绩为88分
#!/bin/bash
read -p "请输入姓名:" name
read -t 3 -p "请输入成绩:" score
echo "$name的成绩为$score分"
```
## shell - 算数运算符
```
# 运算符
1. + - * / %
2. ++: 自加运算，类似于python中的i++,等同于i+=1
3. --:同++
# 运算命令
1. let 运算表达式
    i=1
    let i++
    echo $1
2. expr 运算表达式
    i=1
    sum=`expr $1 +5` # +两侧要有空格
    echo $sum
3. $[]
    echo $[1+1]
    echo $[1-1]
    echo $[a+a] # 调用变量不用多次添加$符号
    echo $[1*1] # 乘法无需转义
```
**练习**
```
使用位置变量+以上方法一、方法二中任意一种，实现2个数字的相加
#!/bin/bash
echo $[$1+$2]
echo `expr $1 + $2`
```
## shell - 比较运算符
```
# 语法格式
    [ 判断语句 ] # 注意括号必须有空格
# 1.字符比较
    [ A == A ] # 相等(等号两边需要有空格)
    [ A != B ] # 不相等
    [ -z $变量 ] # 判断是否为空
# 2. 数字比较
    -eq 等于(equal)
    -ne 不等于(not equal)
    -gt 大于(greater than)
    -ge 大于等于(great or equal)
    -lt 小于(less than)
    -le 小于等于(less or equal)
# 3. 文件|目录比较
    [ -e 文件或目录 ] # 是否存在exist
    [ -f 文件 ] # 存在且为文件file
    [ -d 目录 ] # 存在且为目录directory
    [ -r 文件或目录 ] # 判断是否可读read
    [ -w 文件或目录 ] # 判断是否可写write
    [ -x 文件或目录 ] # 判断是否可执行
```
## shell - if分支结构
```
# 1. 单分支语法格式
    if 判断 ;then
        命令
        命令
    fi
# 2. 双分支语法格式
    if 判断 ;then
        命令1
    else
        命令2
    fi
# 3. 多分支语法格式
    if 判断 ;then
        判断1 
    elif 判断;then
        命令2
    else
        命令3
    fi
# 示例
#!/bin/bash
if [ $USER == tarena ];then
    echo "Yes,You are Tarena"
else
    echo "You are other man"
```
**猜数字游戏**
```
#!/bin/bash

read -p "数字已生成,请猜:" you

if [ $you -gt $C ];then
	echo "大"
elif [ $you -lt $C ];then
	echo "小"
else
	echo "对"
fi
```
## shell - for循环
```
# 语法格式
for 变量 in 值序列
do
    命令
done
# 示例
for i in 1 2 3 4 5
do
    echo "hello world"
done
```
**练习判断指定网段的IP地址那些可以用,那些不能用？**
```
#!/bin/bash 

for i in {1..254}
do
	# /dev/null为黑洞,不想要的输出放在里面
	ping -c 2 192.168.43.$i &> /dev/null
	# $?返回上一条命令的执行状态
	if [ $? -eq 0 ];then
		echo "192.168.43.$i is up"
	else
		echo "192.168.43.$i is down"
	fi
done
```
## shell - while循环
```
# 语法格式
while 条件判断
do
    命令
done
# 示例
#!/bin/bash

i=1
while [ $i -le 5 ]
do
	echo $i
	# 自加1
	let i++
done
```
**while补充**
```
1. 死循环
while :
do 
    循环体
done
2. vim批量缩进
显示行号:set nu
命令行模式输入:
1,3>敲Enter - 向右缩进
3,8<敲Enter - 向左缩进
```
## shell - case分支结构
```shell script
# 1. 特点
根据变量值不同,执行不同操作
# 语法格式
case $变量名 in
模式1)
    代码块
    ;;
模式2)
    代码块
    ;;
*)
    代码块
    ;;
esac
```
**示例-输入一个字符，判断为数字、字母还是其他字符**
```shell script
#!/bin/bash

echo "+-----------------------------+"
echo "|      Welcome(q to quit)     |"
echo "+-----------------------------+"

read -p "请输入一个字符:" char

if [ ${#char} -ne 1 ];then
	echo "$char不是1个字符！！"
	exit
elif [ $char == "q"  ];then
	echo "程序退出"
	exit
fi

case $char in
[a-z]|[A-Z])
	echo "字母"
	;;
[0-9])
	echo "数字"
	;;
*)
	echo "其他字符"
	;;
esac
```
**练习：编写一个nginx的启动脚本，包含start|stop|restart**
```shell script
#!/bin/bash

read -p "请选择操作(start|stop|restart):" operation

case $operation in
"start")
	sudo /etc/init.d/nginx start
	;;
"stop")
	sudo /etc/init.d/nginx stop
	;;
"restart")
	sudo /etc/init.d/nginx restart
	;;
*)
	echo "Usage: nginx {start|stop|restart}"
	;;
esac
````
**知识点总结**
```
# 1. 获取字符串长度
${#变量名}
# 2. 字符串索引及切片
${string:index:number}
key='ABCDE'
${key:0:1} # A 获取下标索引为0的元素
${key:1:2} # BC
# 3. vim批量缩进
1. 进入命令行模式 : shift +:
2. 1,3> + Enter :  1-3行缩进
2. 1,3< + Enter :  1-3行往回缩进
```
## shell实战
### 1. 每2秒钟检测一次MySQL数据库的连接数量
```
# mysqladmin命令
mysql服务器管理任务的工具，它可以检查mysql服务器的配置和当前工作状态
```
**代码实现**
```shell script
#!/bin/bash
# 每2秒钟检测一次MySQL并发连接数
user="root"
passwd="123456"
while :
do
	count=`mysqladmin -u$user -p$passwd status | awk '{print $4}'`
	echo "`date +%H:%M:%S` 并发连接数为:$count"    
	sleep 2
done
```
### 2. 根据md5校验码,检测文件是否被修改
```
# 1. 生成md5的文件校验码
md5sum nginx.conf
```
**代码实现**
```
#!/bin/bash
# 本示例脚本检测的是/etc目录下所有的conf结尾的文件
# 本脚本的目标数据没有被修改时执行一次，当怀疑数据被人篡改，再执行一次
# 将两次执行结果作对比，MD5码发生改变的文件就是被人篡改的文件
#!/bin/bash

for file in $(ls /etc/*.conf)
do
	md5sum $file >> r2.txt
done
# 如何查看两个文件的不同
diff 文件1 文件2
# 结果
# 1. test.conf发生了改变
# 2. 第30行发生了变化(changge)
30c30
< 84007bd881d1d5fb40eaf3a9bd263ba8  /etc/test.conf
---
> 970c7552bfa8322ac62a7de2a9c0b263  /etc/test.conf
```
### 3. 备份MySQL数据库
```shell script
# 备份MySQL数据库汇总的mysql
#!/bin/bash

user="root"
passwd="123456"
dbname="mysql"
filename=$(date +%Y-%m-%d)-mysql.sql

# 测试备份目录是否存在,不存在则自动创建该目录
if [ ! -d "/home/tarena/backup" ]; then
	mkdir -p /home/tarena/backup
fi

# 备份
mysqldump -u$user -p$passwd $dbname > /home/tarena/backup/$filename
```
### 4. 随机生成8位密码-数字、字母、下划线
```
#!/bin/bash
# 设置变量key，存储密码的所有可能性(密码库),如果还需要其他字符请自行添加其他密码字符
# 使用$#统计密码库的长度
key="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_"
length=${#key}
# 设置初始密码为空
pass=''
# 循环8次，生成8位随机密码
# 每次都是随机数对密码库的长度取余,确保提取的密码字符不超过密码库的长度
# 每次循环提取一位随机密码，并将该随机码追加到pass变量之后
for i in {1..8}:
do
	index=$[RANDOM%$length]
	pass=$pass${key:$index:1}
done
echo $pass
```
## shell - 函数
```
1. 语法格式
函数名(){
    代码块
}
2. 调用
函数名
```
**示例代码**
```shell script
#!/bin/bash

sumn(){
	echo $[n1+n2]
}

subn(){
	echo $[n1-n2]
}

read -p "First:" n1
read -p "Second:" n2
read -p "Operation(+|-):" op

case $op in
"+")
	sumn
	;;
"-")
	subn
	;;
*)
	echo "Invalid"
	;;
esac
````

